interface { }; interface hi  }; /* an error on the first line */
/*
 * Copyright (c) 1995, 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 *
 * This file is part of Flick, the Flexible IDL Compiler Kit.
 *
 * Flick is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Flick is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Flick; see the file COPYING.  If not, write to
 * the Free Software Foundation, 59 Temple Place #330, Boston, MA 02111, USA.
 */

interface test {
  const *** x = 56;
  const long x  1;
  const unsigned x = 1;
  const unsigned int x = 1;
  const unsigned &&& x = 1;
  const long  = 1;
  const long x = 56-;
  typedef &&& myint;
  typedef long *kasjdf;

  short Short(in short a,
	      inout short b,
	      out short c);
  oneway long Long(in long a,
	    inout long b,
	    out long c);
  oneway 8 Long(in long a,
	    inout long b,
	    out long c);
  unsigned int UShort(in unsigned short a, 
			inout unsigned short b, 
			out unsigned short c);
};

module 1mod1  /* bad name */
{
    module  /* missing identifier */
    {
	interface ex1
	{
	    attribute long	l1;
	    readonly attribute long l2;

	    long	m1(in long a);
	};

	interface ex2 : ex1
	{
	    attribute long	l3;

	    long	m2(in long a, out long b);
	};
    };
};

union Foo switch (long { /* missing ')' */
case 1: long x;
case 3: **** ;
case : long x;
case 2: Bar y;
default: char z;
};


union Foo2 switch (  /* unmatched '(' */ {
  case 'a': long x;
  case 'b': Foo y;
};

union Foo2 switch (ch) {
  case 'a': long x;
  case 'b': Foo y;
};

/* This should test for alignment constraints on arrays */

// This is a data structure that ends in unconstrained alignment
struct end {
	long elem1;
	char elem2;
};
// This is a data structure that begins in unconstrained alignment
struct begin    /* missing '{' */
	char elem1;
	long _elem2;  /* '_' not allowed */
};

struct cLd {
	char first;
	long data[50];
	string<50> last;	
	string<50 last2;
};

struct dLc {
	double first;
	long data[50];
	char last;
};

struct sLs {
	short first;
	long data[50];
	short last;
}  /* missing ';' */

struct  /* missing ident */ {
	char first;
	end data[50];
	double last;
        struct sLs s_;  /* unneeded "struct" identifier */
};

struct d4LCc /*invalid ident */ {
	double first;
	end data[50;    /* Missing ] ! */
	char last;
};

struct sLCs {
	short first;
	end data[;
    /* a comment

*/	eric ep; /* undefined type "eric" */
 	'        /* illegal character ''' */
	int x;  /* "int" should be "long" or "short" */
	short last;
	long last;  /* duplicate name */
};

struct cCLd {
       8
};

struct dCLc {
	double first;
	begin data[50];
	char last;
};

struct sCLs {
	short first;
	begin data[50];
	short last;
};

#define test(t) t test_##t (in t inp, inout t iop, out t outp)

interface arrays {
	test(cLd);
	test(dLc);
	test(sLs);
	test(cLCd);
	test(dLCc);
	test(sLCs);
	test(cCLd);
	test(dCLc);
	test(sCLs);

        /* /* warning: nested comment */
};


/*
 * Copyright (c) 1997 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 *
 * This file is part of Flick, the Flexible IDL Compiler Kit.
 *
 * Flick is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Flick is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Flick; see the file COPYING.  If not, write to
 * the Free Software Foundation, 59 Temple Place #330, Boston, MA 02111, USA.
 */

/* testing for good functionality of strings vs. arrays */

subsystem test 123000;
test 123000;
subsystem 123000;
subsystem test;
subsystem test 123000

serverprefix s_;

type mach_port_t = ;
type unsigned = MACH_MSG_TYPE_INTEGER_32

type t64B array[16] of unsigned;
type = array[32] of unsigned;
type array[64] of unsigned;
type t512B = array[128] unsigned;
type t1K = array[256] of;
type t2K = array[512];
type t4K = array[1024]
t8K = array[2048] of unsigned;
array[4096] of unsigned;
type t32K = array[] of unsigned;
type t64K = [16384] of unsigned;
type t64K = array[ of unsigned;
type t64K = array[*] of unsigned;
type t64K = array] of unsigned;
type t64K = array of unsigned;
type t64K = array unsigned;
type t64K = array[sdf] of unsigned;
type t64K = array[163la;jsd'f84] of unsigned;
type t64K = array[16384] of unsigned;
type t64K = array[16384] of unsigned;
asdfasdf;lakjsdlf'gkasdfd;ljasdfdg;kjasd
type t64K = unsigned[16384];
type t64K = aray[16384] of unsigned;
type t64K = arrey(16384) of unsigned;
"
type s64B = struct[16] of unsigned;
type s128B = struct[32] of unsigned;s
type s256B = struct[64] of unsigned;
type s512B = struct[128] of unsigned;
type s1K = struct[256] of unsigned;
type s2K = struct[512] of unsigned;
type s4K = struct[1024] of unsigned;
type s8K = struct[2048] of unsigned;
type s16K = struct[4096] of unsigned;
type s32K = struct[8192] of unsigned;
type s64K = struct[16384] of unsigned;

skip  me;
skip;

routine	rpc_64_in(
	oneway /*illegal*/ target : mach_port_t;
	foo: t64B);

routine	rpc_128_in
	target : mach_port_t;
	foo: t128B);

routine	rpc_256_in(
	target : mach_port_t;
	foo: t256B;

routine	rpc_512_in(
	target : mach_port_t;
	foo t512B);

routine	rpc_1K_in(
	target : ;
	data: t1K);

routine	rpc_2K_in(
	target : 
	data: t2K);

routine	rpc_4K_in(
	 : mach_port_t;
	data: t4K);

	rpc_8K_in(
	target : mach_port_t;
	data: t8K);

routine	rpc_16K_in;

routine	rpc_32K_in();

routine	rpc_64K_in(
	target : mach_port_t
	data: t64K)



routine	rpc_s64_in(
	target : mach_port_t
	foo: s64B)

routine	rpc_s128_in(
	target : mach_port_t;
	foo s128B);

simpleroutine	rpc_s256_in(
	target : mach_port_t;
	foo: s256B);

routine	rpc_s512_in(
	target : mach_port_t;
	foo: s512B);

routine	rpc_s1K_in(
	target : mach_port_t;
	data: s1K);

routine	rpc_s2K_in(
	target : mach_port_t;
	data: s2K);

routine	rpc_s4K_in(
	target : mach_port_t;
	data: s4K);

routine	rpc_s8K_in(
	target : mach_port_t;
	data: s8K);

routine	rpc_s16K_in(
	target : mach_port_t;
	data s16K);

routine	rpc_s32K_in(
	target : mach_port_t;
	data: s32K);

routine	rpc_s64K_in(
	target : mach_port_t;
	data: s64K);

/* End of file. */


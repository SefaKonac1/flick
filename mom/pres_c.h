/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _PRES_C_H_RPCGEN
#define	_PRES_C_H_RPCGEN

#include <rpc/rpc.h>
#ifndef _flick_pres_c_h
#define _flick_pres_c_h

#include <rpc/types.h>
#include <rpc/xdr.h>
#include <mom/mint.h>
#include <mom/cast.h>
#include <mom/aoi.h>
#include <mom/meta.h>

typedef int cast_ref;

typedef struct pres_c_inline_u *pres_c_inline;

typedef struct pres_c_mapping_u *pres_c_mapping;

typedef u_int pres_c_alloc_flags;
#define	PRES_C_ALLOC_NEVER 0x00000000
#define	PRES_C_ALLOC_IF_NULL 0x00000001
#define	PRES_C_ALLOC_IF_TOO_SMALL 0x00000002
#define	PRES_C_ALLOC_IF_TOO_LARGE 0x00000004
#define	PRES_C_ALLOC_ALWAYS 0x00000008
#define	PRES_C_ALLOC_EVER 0x0000000f
#define	PRES_C_ALLOC_CLEAR 0x00000010
#define	PRES_C_REALLOC_IF_TOO_SMALL 0x00000200
#define	PRES_C_REALLOC_IF_TOO_LARGE 0x00000400
#define	PRES_C_REALLOC_ALWAYS 0x00000800
#define	PRES_C_REALLOC_EVER 0x00000f00
#define	PRES_C_REALLOC_CLEAR 0x00001000
#define	PRES_C_FAIL_IF_TOO_SMALL 0x00002000
#define	PRES_C_DEALLOC_NEVER 0x00000000
#define	PRES_C_DEALLOC_ALWAYS 0x00080000
#define	PRES_C_DEALLOC_EVER 0x000f0000
#define	PRES_C_DEALLOC_NULLIFY 0x00100000
#define	PRES_C_DEALLOC_ON_FAIL 0x00200000
#define	PRES_C_RUN_CTOR 0x01000000
#define	PRES_C_RUN_DTOR 0x02000000
#define	PRES_C_DIRECTIONS 5

enum pres_c_allocator_kind {
	PRES_C_ALLOCATOR_DONTCARE = 0,
	PRES_C_ALLOCATOR_STATIC = 1,
	PRES_C_ALLOCATOR_OUTOFLINE = 2,
	PRES_C_ALLOCATOR_NAME = 3
};
typedef enum pres_c_allocator_kind pres_c_allocator_kind;

struct pres_c_allocator {
	pres_c_allocator_kind kind;
	union {
		char *ool_name;
		char *name;
	} pres_c_allocator_u;
};
typedef struct pres_c_allocator pres_c_allocator;

struct pres_c_allocation_case {
	pres_c_alloc_flags flags;
	pres_c_allocator allocator;
	cast_init alloc_init;
};
typedef struct pres_c_allocation_case pres_c_allocation_case;

enum pres_c_allocation_allow {
	PRES_C_ALLOCATION_INVALID = 0,
	PRES_C_ALLOCATION_ALLOW = 1
};
typedef enum pres_c_allocation_allow pres_c_allocation_allow;

struct pres_c_allocation_u {
	pres_c_allocation_allow allow;
	union {
		pres_c_allocation_case val;
	} pres_c_allocation_u_u;
};
typedef struct pres_c_allocation_u pres_c_allocation_u;

struct pres_c_allocation {
	pres_c_allocation_u cases[PRES_C_DIRECTIONS];
};
typedef struct pres_c_allocation pres_c_allocation;

enum allocation_owner {
	ALLOCATION_OWNER_FLICK = 0,
	ALLOCATION_OWNER_USER = 1,
	ALLOCATION_OWNER_CLIENT = 2,
	ALLOCATION_OWNER_SERVER = 3,
	ALLOCATION_OWNER_STUB = 4,
	ALLOCATION_OWNER_DISPATCH = 5,
	ALLOCATION_OWNER_WORKFUNC = 6
};
typedef enum allocation_owner allocation_owner;

enum pres_c_temporary_type {
	TEMP_TYPE_PRESENTED = 0,
	TEMP_TYPE_ENCODED = 1
};
typedef enum pres_c_temporary_type pres_c_temporary_type;

struct pres_c_temporary {
	pres_c_mapping map;
	char *name;
	cast_type ctype;
	cast_expr init;
	pres_c_temporary_type type;
	int is_const;
	char *prehandler;
	char *posthandler;
};
typedef struct pres_c_temporary pres_c_temporary;

typedef int pres_c_inline_index;

struct pres_c_inline_atom {
	pres_c_inline_index index;
	pres_c_mapping mapping;
};
typedef struct pres_c_inline_atom pres_c_inline_atom;

struct pres_c_inline_struct_slot {
	int mint_struct_slot_index;
	pres_c_inline inl;
};
typedef struct pres_c_inline_struct_slot pres_c_inline_struct_slot;

struct pres_c_inline_struct {
	struct {
		u_int slots_len;
		pres_c_inline_struct_slot *slots_val;
	} slots;
};
typedef struct pres_c_inline_struct pres_c_inline_struct;

struct pres_c_inline_func_params_struct {
	struct {
		u_int slots_len;
		pres_c_inline_struct_slot *slots_val;
	} slots;
	pres_c_inline_struct_slot *return_slot;
};
typedef struct pres_c_inline_func_params_struct pres_c_inline_func_params_struct;

struct pres_c_inline_handler_func {
	struct {
		u_int slots_len;
		pres_c_inline_struct_slot *slots_val;
	} slots;
};
typedef struct pres_c_inline_handler_func pres_c_inline_handler_func;

struct pres_c_inline_struct_union_case {
	int index;
	pres_c_mapping mapping;
};
typedef struct pres_c_inline_struct_union_case pres_c_inline_struct_union_case;

struct pres_c_inline_struct_union {
	pres_c_inline_atom discrim;
	pres_c_inline_index union_index;
	struct {
		u_int cases_len;
		pres_c_inline_struct_union_case *cases_val;
	} cases;
	pres_c_inline_struct_union_case *dfault;
};
typedef struct pres_c_inline_struct_union pres_c_inline_struct_union;

struct pres_c_inline_void_union_case {
	cast_expr case_value;
	cast_type type;
	pres_c_mapping mapping;
};
typedef struct pres_c_inline_void_union_case pres_c_inline_void_union_case;

struct pres_c_inline_void_union {
	pres_c_inline_atom discrim;
	pres_c_inline_index void_index;
	struct {
		u_int cases_len;
		pres_c_inline_void_union_case *cases_val;
	} cases;
	pres_c_inline_void_union_case *dfault;
};
typedef struct pres_c_inline_void_union pres_c_inline_void_union;

struct pres_c_inline_expanded_union {
	pres_c_inline_atom discrim;
	struct {
		u_int cases_len;
		pres_c_inline *cases_val;
	} cases;
	pres_c_inline dfault;
};
typedef struct pres_c_inline_expanded_union pres_c_inline_expanded_union;

struct pres_c_inline_collapsed_union {
	mint_const discrim_val;
	pres_c_inline selected_case;
};
typedef struct pres_c_inline_collapsed_union pres_c_inline_collapsed_union;

typedef pres_c_inline pres_c_inline_virtual_union_case;

struct pres_c_inline_virtual_union {
	char *arglist_name;
	pres_c_inline_virtual_union_case discrim;
	struct {
		u_int cases_len;
		pres_c_inline_virtual_union_case *cases_val;
	} cases;
	pres_c_inline_virtual_union_case dfault;
};
typedef struct pres_c_inline_virtual_union pres_c_inline_virtual_union;

struct pres_c_inline_typed {
	pres_c_inline tag;
	pres_c_inline inl;
};
typedef struct pres_c_inline_typed pres_c_inline_typed;

struct pres_c_inline_allocation_context {
	char *arglist_name;
	pres_c_inline offset;
	pres_c_inline length;
	pres_c_inline min_len;
	pres_c_inline max_len;
	pres_c_inline alloc_len;
	pres_c_inline min_alloc_len;
	pres_c_inline max_alloc_len;
	pres_c_inline release;
	pres_c_inline terminator;
	pres_c_inline mustcopy;
	int overwrite;
	allocation_owner owner;
	pres_c_allocation alloc;
	pres_c_inline ptr;
};
typedef struct pres_c_inline_allocation_context pres_c_inline_allocation_context;

struct pres_c_inline_xlate {
	pres_c_inline sub;
	pres_c_inline_index index;
	cast_type internal_ctype;
	char *translator;
	char *destructor;
};
typedef struct pres_c_inline_xlate pres_c_inline_xlate;

struct pres_c_inline_assign {
	pres_c_inline sub;
	pres_c_inline_index index;
	cast_expr value;
};
typedef struct pres_c_inline_assign pres_c_inline_assign;

struct pres_c_inline_cond {
	pres_c_inline_index index;
	pres_c_inline true_inl;
	pres_c_inline false_inl;
};
typedef struct pres_c_inline_cond pres_c_inline_cond;

enum pres_c_message_attribute_kind {
	PRES_C_MESSAGE_ATTRIBUTE_FLAGS = 0,
	PRES_C_MESSAGE_ATTRIBUTE_TIMEOUT = 1,
	PRES_C_MESSAGE_ATTRIBUTE_SEQUENCE_RECEIVED = 2,
	PRES_C_MESSAGE_ATTRIBUTE_CLIENT_REFERENCE = 3,
	PRES_C_MESSAGE_ATTRIBUTE_SERVERCOPY = 4
};
typedef enum pres_c_message_attribute_kind pres_c_message_attribute_kind;

struct pres_c_inline_message_attribute {
	pres_c_message_attribute_kind kind;
};
typedef struct pres_c_inline_message_attribute pres_c_inline_message_attribute;

enum pres_c_inline_kind {
	PRES_C_INLINE_ATOM = 1,
	PRES_C_INLINE_STRUCT = 2,
	PRES_C_INLINE_FUNC_PARAMS_STRUCT = 3,
	PRES_C_INLINE_HANDLER_FUNC = 4,
	PRES_C_INLINE_STRUCT_UNION = 5,
	PRES_C_INLINE_EXPANDED_UNION = 6,
	PRES_C_INLINE_VOID_UNION = 7,
	PRES_C_INLINE_COLLAPSED_UNION = 8,
	PRES_C_INLINE_TYPED = 9,
	PRES_C_INLINE_THROWAWAY = 10,
	PRES_C_INLINE_XLATE = 11,
	PRES_C_INLINE_ASSIGN = 12,
	PRES_C_INLINE_COND = 13,
	PRES_C_INLINE_VIRTUAL_UNION = 14,
	PRES_C_INLINE_MESSAGE_ATTRIBUTE = 15,
	PRES_C_INLINE_ALLOCATION_CONTEXT = 16,
	PRES_C_INLINE_TEMPORARY = 17,
	PRES_C_INLINE_ILLEGAL = 18
};
typedef enum pres_c_inline_kind pres_c_inline_kind;

struct pres_c_inline_u {
	pres_c_inline_kind kind;
	union {
		pres_c_inline_atom atom;
		pres_c_inline_struct struct_i;
		pres_c_inline_func_params_struct func_params_i;
		pres_c_inline_handler_func handler_i;
		pres_c_inline_struct_union struct_union;
		pres_c_inline_expanded_union expanded_union;
		pres_c_inline_void_union void_union;
		pres_c_inline_collapsed_union collapsed_union;
		pres_c_inline_virtual_union virtual_union;
		pres_c_inline_typed typed;
		pres_c_inline_xlate xlate;
		pres_c_inline_assign assign;
		pres_c_inline_cond cond;
		pres_c_inline_message_attribute msg_attr;
		pres_c_inline_allocation_context acontext;
		pres_c_temporary temp;
	} pres_c_inline_u_u;
};
typedef struct pres_c_inline_u pres_c_inline_u;

struct pres_c_mapping_stub {
	int mapping_stub_index;
};
typedef struct pres_c_mapping_stub pres_c_mapping_stub;

enum pres_c_direction {
	PRES_C_DIRECTION_UNKNOWN = 0,
	PRES_C_DIRECTION_IN = 1,
	PRES_C_DIRECTION_OUT = 2,
	PRES_C_DIRECTION_INOUT = 3,
	PRES_C_DIRECTION_RETURN = 4
};
typedef enum pres_c_direction pres_c_direction;

struct pres_c_mapping_direction {
	pres_c_direction dir;
	pres_c_mapping mapping;
};
typedef struct pres_c_mapping_direction pres_c_mapping_direction;

struct pres_c_mapping_pointer {
	char *arglist_name;
	pres_c_mapping target;
};
typedef struct pres_c_mapping_pointer pres_c_mapping_pointer;

struct pres_c_mapping_var_reference {
	pres_c_mapping target;
};
typedef struct pres_c_mapping_var_reference pres_c_mapping_var_reference;

struct pres_c_mapping_optional_pointer {
	char *arglist_name;
	pres_c_mapping target;
};
typedef struct pres_c_mapping_optional_pointer pres_c_mapping_optional_pointer;

typedef pres_c_inline pres_c_mapping_struct;

struct pres_c_mapping_internal_array {
	char *arglist_name;
	pres_c_mapping element_mapping;
};
typedef struct pres_c_mapping_internal_array pres_c_mapping_internal_array;

struct pres_c_mapping_flat_union {
	pres_c_mapping discrim;
	struct {
		u_int cases_len;
		pres_c_mapping *cases_val;
	} cases;
	pres_c_mapping dfault;
};
typedef struct pres_c_mapping_flat_union pres_c_mapping_flat_union;

struct pres_c_mapping_special {
	char *marshaler_name;
};
typedef struct pres_c_mapping_special pres_c_mapping_special;

struct pres_c_mapping_xlate {
	cast_type internal_ctype;
	pres_c_mapping internal_mapping;
	char *translator;
	char *destructor;
};
typedef struct pres_c_mapping_xlate pres_c_mapping_xlate;

enum pres_c_reference_kind {
	PRES_C_REFERENCE_COPY = 0,
	PRES_C_REFERENCE_MOVE = 1,
	PRES_C_REFERENCE_COPY_AND_CONVERT = 2
};
typedef enum pres_c_reference_kind pres_c_reference_kind;

struct pres_c_mapping_reference {
	pres_c_reference_kind kind;
	int ref_count;
	char *arglist_name;
};
typedef struct pres_c_mapping_reference pres_c_mapping_reference;

enum pres_c_sid_kind {
	PRES_C_SID_CLIENT = 0,
	PRES_C_SID_SERVER = 1
};
typedef enum pres_c_sid_kind pres_c_sid_kind;

struct pres_c_mapping_sid {
	pres_c_sid_kind kind;
};
typedef struct pres_c_mapping_sid pres_c_mapping_sid;

struct pres_c_mapping_message_attribute {
	pres_c_message_attribute_kind kind;
};
typedef struct pres_c_mapping_message_attribute pres_c_mapping_message_attribute;

struct pres_c_mapping_argument {
	char *arglist_name;
	char *arg_name;
	pres_c_mapping map;
};
typedef struct pres_c_mapping_argument pres_c_mapping_argument;

struct pres_c_mapping_initialize {
	cast_expr value;
};
typedef struct pres_c_mapping_initialize pres_c_mapping_initialize;

struct pres_c_mapping_selector {
	int index;
	pres_c_mapping mapping;
};
typedef struct pres_c_mapping_selector pres_c_mapping_selector;

struct pres_c_mapping_param_root {
	cast_type ctype;
	cast_init init;
	pres_c_mapping map;
};
typedef struct pres_c_mapping_param_root pres_c_mapping_param_root;

struct pres_c_mapping_singleton {
	pres_c_inline inl;
};
typedef struct pres_c_mapping_singleton pres_c_mapping_singleton;

enum pres_c_mapping_kind {
	PRES_C_MAPPING_DIRECT = 0,
	PRES_C_MAPPING_STUB = 1,
	PRES_C_MAPPING_POINTER = 2,
	PRES_C_MAPPING_INTERNAL_ARRAY = 3,
	PRES_C_MAPPING_STRUCT = 4,
	PRES_C_MAPPING_FLAT_UNION = 5,
	PRES_C_MAPPING_SPECIAL = 6,
	PRES_C_MAPPING_XLATE = 7,
	PRES_C_MAPPING_REFERENCE = 8,
	PRES_C_MAPPING_TYPE_TAG = 9,
	PRES_C_MAPPING_TYPED = 10,
	PRES_C_MAPPING_OPTIONAL_POINTER = 11,
	PRES_C_MAPPING_IGNORE = 12,
	PRES_C_MAPPING_SYSTEM_EXCEPTION = 13,
	PRES_C_MAPPING_DIRECTION = 14,
	PRES_C_MAPPING_SID = 15,
	PRES_C_MAPPING_ARGUMENT = 16,
	PRES_C_MAPPING_MESSAGE_ATTRIBUTE = 17,
	PRES_C_MAPPING_INITIALIZE = 18,
	PRES_C_MAPPING_ILLEGAL = 19,
	PRES_C_MAPPING_VAR_REFERENCE = 20,
	PRES_C_MAPPING_PARAM_ROOT = 21,
	PRES_C_MAPPING_ELSEWHERE = 22,
	PRES_C_MAPPING_SELECTOR = 23,
	PRES_C_MAPPING_TEMPORARY = 24,
	PRES_C_MAPPING_SINGLETON = 25
};
typedef enum pres_c_mapping_kind pres_c_mapping_kind;

struct pres_c_mapping_u {
	pres_c_mapping_kind kind;
	union {
		pres_c_mapping_stub mapping_stub;
		pres_c_mapping_pointer pointer;
		pres_c_mapping_internal_array internal_array;
		pres_c_mapping_struct struct_i;
		pres_c_mapping_flat_union flat_union;
		pres_c_mapping_special special;
		pres_c_mapping_xlate xlate;
		pres_c_mapping_reference ref;
		pres_c_mapping_optional_pointer optional_pointer;
		pres_c_mapping_direction direction;
		pres_c_mapping_sid sid;
		pres_c_mapping_argument argument;
		pres_c_mapping_message_attribute message_attribute;
		pres_c_mapping_initialize initialize;
		pres_c_mapping_var_reference var_ref;
		pres_c_mapping_param_root param_root;
		pres_c_mapping_selector selector;
		pres_c_temporary temp;
		pres_c_mapping_singleton singleton;
	} pres_c_mapping_u_u;
};
typedef struct pres_c_mapping_u pres_c_mapping_u;
#define	pres_c_func_return_index -1

struct pres_c_marshal_stub {
	cast_ref c_func;
	mint_ref itype;
	pres_c_inline i;
	pres_c_inline target_i;
	pres_c_mapping seethru_map;
};
typedef struct pres_c_marshal_stub pres_c_marshal_stub;

typedef u_int pres_c_stub_op_flags;
#define	PRES_C_STUB_OP_FLAG_NONE 0x00000000
#define	PRES_C_STUB_OP_FLAG_ONEWAY 0x00000001
#define	PRES_C_STUB_OP_FLAG_IDEMPOTENT 0x00000002

struct pres_c_client_stub {
	cast_ref c_func;
	pres_c_stub_op_flags op_flags;
	mint_ref request_itype;
	mint_ref reply_itype;
	pres_c_inline request_i;
	pres_c_inline reply_i;
	mint_ref target_itype;
	pres_c_inline target_i;
	mint_ref client_itype;
	pres_c_inline client_i;
	mint_ref error_itype;
	pres_c_inline error_i;
};
typedef struct pres_c_client_stub pres_c_client_stub;

struct pres_c_server_func {
	cast_ref c_func;
	pres_c_stub_op_flags op_flags;
	pres_c_inline request_i;
	pres_c_inline reply_i;
	mint_ref target_itype;
	pres_c_inline target_i;
	mint_ref client_itype;
	pres_c_inline client_i;
	mint_ref error_itype;
	pres_c_inline error_i;
};
typedef struct pres_c_server_func pres_c_server_func;

struct pres_c_receive_func {
	cast_ref c_func;
	pres_c_stub_op_flags op_flags;
	mint_ref simple_msg_itype;
	pres_c_inline msg_i;
	mint_ref target_itype;
	pres_c_inline target_i;
	mint_ref client_itype;
	pres_c_inline client_i;
	mint_ref error_itype;
	pres_c_inline error_i;
};
typedef struct pres_c_receive_func pres_c_receive_func;

enum pres_c_func_kind {
	PRES_C_SERVER_FUNC = 1,
	PRES_C_RECEIVE_FUNC = 2
};
typedef enum pres_c_func_kind pres_c_func_kind;

struct pres_c_func {
	pres_c_func_kind kind;
	union {
		pres_c_server_func sfunc;
		pres_c_receive_func rfunc;
	} pres_c_func_u;
};
typedef struct pres_c_func pres_c_func;

struct pres_c_skel {
	cast_ref c_def;
	mint_ref request_itype;
	mint_ref reply_itype;
	struct {
		u_int funcs_len;
		pres_c_func *funcs_val;
	} funcs;
};
typedef struct pres_c_skel pres_c_skel;

struct pres_c_msg_stub {
	cast_ref c_func;
	mint_ref msg_itype;
	pres_c_inline msg_i;
	mint_ref target_itype;
	pres_c_inline target_i;
	int request;
};
typedef struct pres_c_msg_stub pres_c_msg_stub;

struct pres_c_msg_marshal_stub {
	cast_ref c_func;
	pres_c_stub_op_flags op_flags;
	mint_ref itype;
	pres_c_inline i;
	int client;
	int request;
	char *reply_handler_name;
};
typedef struct pres_c_msg_marshal_stub pres_c_msg_marshal_stub;

struct pres_c_continue_stub {
	cast_ref c_func;
	mint_ref itype;
	pres_c_inline i;
	int request;
};
typedef struct pres_c_continue_stub pres_c_continue_stub;

enum pres_c_stub_kind {
	PRES_C_MARSHAL_STUB = 1,
	PRES_C_UNMARSHAL_STUB = 2,
	PRES_C_CLIENT_STUB = 3,
	PRES_C_CLIENT_SKEL = 5,
	PRES_C_SERVER_SKEL = 6,
	PRES_C_CONTINUE_STUB = 8,
	PRES_C_MESSAGE_MARSHAL_STUB = 10,
	PRES_C_MESSAGE_UNMARSHAL_STUB = 11,
	PRES_C_SEND_STUB = 15,
	PRES_C_RECV_STUB = 16
};
typedef enum pres_c_stub_kind pres_c_stub_kind;

struct pres_c_stub {
	pres_c_stub_kind kind;
	union {
		pres_c_marshal_stub mstub;
		pres_c_marshal_stub ustub;
		pres_c_client_stub cstub;
		pres_c_skel cskel;
		pres_c_skel sskel;
		pres_c_msg_stub send_stub;
		pres_c_msg_stub recv_stub;
		pres_c_msg_marshal_stub mmstub;
		pres_c_msg_marshal_stub mustub;
		pres_c_continue_stub continue_stub;
	} pres_c_stub_u;
};
typedef struct pres_c_stub pres_c_stub;

enum tag_data_kind {
	TAG_NONE = 0x0001,
	TAG_ANY = 0x0002,
	TAG_TAG_LIST = 0x0003,
	TAG_BOOL = 0x0004,
	TAG_STRING = 0x0005,
	TAG_INTEGER = 0x0006,
	TAG_FLOAT = 0x0007,
	TAG_REF = 0x0008,
	TAG_OBJECT = 0x0009,
	TAG_CAST_SCOPED_NAME = 0x000a,
	TAG_CAST_DEF = 0x000b,
	TAG_CAST_TYPE = 0x000c,
	TAG_CAST_EXPR = 0x000d,
	TAG_CAST_STMT = 0x000e,
	TAG_CAST_INIT = 0x000f,
	TAG_ANY_ARRAY = 0x8002,
	TAG_TAG_LIST_ARRAY = 0x8003,
	TAG_BOOL_ARRAY = 0x8004,
	TAG_STRING_ARRAY = 0x8005,
	TAG_INTEGER_ARRAY = 0x8006,
	TAG_FLOAT_ARRAY = 0x8007,
	TAG_REF_ARRAY = 0x8008,
	TAG_OBJECT_ARRAY = 0x8009,
	TAG_CAST_SCOPED_NAME_ARRAY = 0x800a,
	TAG_CAST_DEF_ARRAY = 0x800b,
	TAG_CAST_TYPE_ARRAY = 0x800c,
	TAG_CAST_EXPR_ARRAY = 0x800d,
	TAG_CAST_STMT_ARRAY = 0x800e,
	TAG_CAST_INIT_ARRAY = 0x800f
};
typedef enum tag_data_kind tag_data_kind;
#define	TAG_ARRAY 0x8000

typedef struct tag_list *tag_list_ptr;

typedef char *tag_string_array;

typedef struct {
	u_int tag_object_array_len;
	char *tag_object_array_val;
} tag_object_array;

struct tag_data {
	tag_data_kind kind;
	union {
		tag_list_ptr tl;
		char b;
		char *str;
		int i;
		float f;
		char *ref;
		tag_object_array obj;
		cast_scoped_name scname;
		cast_def_t cdef;
		cast_type ctype;
		cast_expr cexpr;
		cast_stmt cstmt;
		cast_init cinit;
		struct {
			u_int tl_a_len;
			tag_list_ptr *tl_a_val;
		} tl_a;
		struct {
			u_int b_a_len;
			char *b_a_val;
		} b_a;
		struct {
			u_int str_a_len;
			tag_string_array *str_a_val;
		} str_a;
		struct {
			u_int i_a_len;
			int *i_a_val;
		} i_a;
		struct {
			u_int f_a_len;
			float *f_a_val;
		} f_a;
		struct {
			u_int ref_a_len;
			tag_string_array *ref_a_val;
		} ref_a;
		struct {
			u_int obj_a_len;
			tag_object_array *obj_a_val;
		} obj_a;
		struct {
			u_int scname_a_len;
			cast_scoped_name *scname_a_val;
		} scname_a;
		struct {
			u_int cdef_a_len;
			cast_def_t *cdef_a_val;
		} cdef_a;
		struct {
			u_int ctype_a_len;
			cast_type *ctype_a_val;
		} ctype_a;
		struct {
			u_int cexpr_a_len;
			cast_expr *cexpr_a_val;
		} cexpr_a;
		struct {
			u_int cstmt_a_len;
			cast_stmt *cstmt_a_val;
		} cstmt_a;
		struct {
			u_int cinit_a_len;
			cast_init *cinit_a_val;
		} cinit_a;
	} tag_data_u;
};
typedef struct tag_data tag_data;

struct tag_item {
	char *tag;
	tag_data data;
};
typedef struct tag_item tag_item;

struct tag_list {
	struct tag_list *parent;
	struct {
		u_int items_len;
		tag_item *items_val;
	} items;
};
typedef struct tag_list tag_list;

struct pres_c_1 {
	mint_1 mint;
	cast_1 cast;
	cast_1 stubs_cast;
	cast_1 pres_cast;
	aoi a;
	struct {
		u_int stubs_len;
		pres_c_stub *stubs_val;
	} stubs;
	char *pres_context;
	struct {
		u_int error_mappings_len;
		cast_expr *error_mappings_val;
	} error_mappings;
	struct {
		u_int unpresented_channels_len;
		data_channel_mask *unpresented_channels_val;
	} unpresented_channels;
	tag_list *pres_attrs;
	meta meta_data;
	int cast_language;
};
typedef struct pres_c_1 pres_c_1;
#endif /* _flick_pres_c_h_ */

/* the xdr functions */
extern bool_t xdr_cast_ref();
extern bool_t xdr_pres_c_inline();
extern bool_t xdr_pres_c_mapping();
extern bool_t xdr_pres_c_alloc_flags();
extern bool_t xdr_pres_c_allocator_kind();
extern bool_t xdr_pres_c_allocator();
extern bool_t xdr_pres_c_allocation_case();
extern bool_t xdr_pres_c_allocation_allow();
extern bool_t xdr_pres_c_allocation_u();
extern bool_t xdr_pres_c_allocation();
extern bool_t xdr_allocation_owner();
extern bool_t xdr_pres_c_temporary_type();
extern bool_t xdr_pres_c_temporary();
extern bool_t xdr_pres_c_inline_index();
extern bool_t xdr_pres_c_inline_atom();
extern bool_t xdr_pres_c_inline_struct_slot();
extern bool_t xdr_pres_c_inline_struct();
extern bool_t xdr_pres_c_inline_func_params_struct();
extern bool_t xdr_pres_c_inline_handler_func();
extern bool_t xdr_pres_c_inline_struct_union_case();
extern bool_t xdr_pres_c_inline_struct_union();
extern bool_t xdr_pres_c_inline_void_union_case();
extern bool_t xdr_pres_c_inline_void_union();
extern bool_t xdr_pres_c_inline_expanded_union();
extern bool_t xdr_pres_c_inline_collapsed_union();
extern bool_t xdr_pres_c_inline_virtual_union_case();
extern bool_t xdr_pres_c_inline_virtual_union();
extern bool_t xdr_pres_c_inline_typed();
extern bool_t xdr_pres_c_inline_allocation_context();
extern bool_t xdr_pres_c_inline_xlate();
extern bool_t xdr_pres_c_inline_assign();
extern bool_t xdr_pres_c_inline_cond();
extern bool_t xdr_pres_c_message_attribute_kind();
extern bool_t xdr_pres_c_inline_message_attribute();
extern bool_t xdr_pres_c_inline_kind();
extern bool_t xdr_pres_c_inline_u();
extern bool_t xdr_pres_c_mapping_stub();
extern bool_t xdr_pres_c_direction();
extern bool_t xdr_pres_c_mapping_direction();
extern bool_t xdr_pres_c_mapping_pointer();
extern bool_t xdr_pres_c_mapping_var_reference();
extern bool_t xdr_pres_c_mapping_optional_pointer();
extern bool_t xdr_pres_c_mapping_struct();
extern bool_t xdr_pres_c_mapping_internal_array();
extern bool_t xdr_pres_c_mapping_flat_union();
extern bool_t xdr_pres_c_mapping_special();
extern bool_t xdr_pres_c_mapping_xlate();
extern bool_t xdr_pres_c_reference_kind();
extern bool_t xdr_pres_c_mapping_reference();
extern bool_t xdr_pres_c_sid_kind();
extern bool_t xdr_pres_c_mapping_sid();
extern bool_t xdr_pres_c_mapping_message_attribute();
extern bool_t xdr_pres_c_mapping_argument();
extern bool_t xdr_pres_c_mapping_initialize();
extern bool_t xdr_pres_c_mapping_selector();
extern bool_t xdr_pres_c_mapping_param_root();
extern bool_t xdr_pres_c_mapping_singleton();
extern bool_t xdr_pres_c_mapping_kind();
extern bool_t xdr_pres_c_mapping_u();
extern bool_t xdr_pres_c_marshal_stub();
extern bool_t xdr_pres_c_stub_op_flags();
extern bool_t xdr_pres_c_client_stub();
extern bool_t xdr_pres_c_server_func();
extern bool_t xdr_pres_c_receive_func();
extern bool_t xdr_pres_c_func_kind();
extern bool_t xdr_pres_c_func();
extern bool_t xdr_pres_c_skel();
extern bool_t xdr_pres_c_msg_stub();
extern bool_t xdr_pres_c_msg_marshal_stub();
extern bool_t xdr_pres_c_continue_stub();
extern bool_t xdr_pres_c_stub_kind();
extern bool_t xdr_pres_c_stub();
extern bool_t xdr_tag_data_kind();
extern bool_t xdr_tag_list_ptr();
extern bool_t xdr_tag_string_array();
extern bool_t xdr_tag_object_array();
extern bool_t xdr_tag_data();
extern bool_t xdr_tag_item();
extern bool_t xdr_tag_list();
extern bool_t xdr_pres_c_1();

#endif /* !_PRES_C_H_RPCGEN */

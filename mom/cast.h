/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CAST_H_RPCGEN
#define	_CAST_H_RPCGEN

#include <rpc/rpc.h>
#ifndef _flick_cast_h
#define _flick_cast_h

#include <rpc/types.h>
#include <rpc/xdr.h>
#include <mom/aoi.h>

typedef struct cast_type_u *cast_type;

typedef struct cast_expr_u *cast_expr;

typedef struct cast_stmt_u *cast_stmt;

typedef struct cast_init_u *cast_init;

typedef struct cast_template_arg_u *cast_template_arg;

typedef struct cast_template_param *cast_template_param_t;

typedef struct {
	u_int cast_template_arg_array_len;
	cast_template_arg *cast_template_arg_array_val;
} cast_template_arg_array;

typedef struct {
	u_int cast_scoped_name_len;
	struct cast_name_s *cast_scoped_name_val;
} cast_scoped_name;

typedef struct {
	u_int cast_scope_len;
	struct cast_def *cast_scope_val;
} cast_scope;

typedef struct cast_def *cast_def_t;

typedef struct {
	u_int cast_expr_array_len;
	cast_expr *cast_expr_array_val;
} cast_expr_array;

typedef struct {
	u_int cast_type_array_len;
	cast_type *cast_type_array_val;
} cast_type_array;

typedef struct {
	u_int cast_init_array_len;
	cast_init *cast_init_array_val;
} cast_init_array;

enum cast_template_arg_kind {
	CAST_TEMP_ARG_NAME = 1,
	CAST_TEMP_ARG_TYPE = 2,
	CAST_TEMP_ARG_EXPR = 3
};
typedef enum cast_template_arg_kind cast_template_arg_kind;

struct cast_template_arg_u {
	cast_template_arg_kind kind;
	union {
		cast_scoped_name name;
		cast_type type;
		cast_expr expr;
	} cast_template_arg_u_u;
};
typedef struct cast_template_arg_u cast_template_arg_u;

struct cast_name_s {
	char *name;
	cast_template_arg_array args;
};
typedef struct cast_name_s cast_name_s;

enum cast_primitive_kind {
	CAST_PRIM_CHAR = 1,
	CAST_PRIM_INT = 2,
	CAST_PRIM_FLOAT = 3,
	CAST_PRIM_DOUBLE = 4,
	CAST_PRIM_BOOL = 5
};
typedef enum cast_primitive_kind cast_primitive_kind;

typedef u_int cast_primitive_modifier;
#define	CAST_MOD_SIGNED 0x0001
#define	CAST_MOD_UNSIGNED 0x0002
#define	CAST_MOD_SHORT 0x0010
#define	CAST_MOD_LONG 0x0020
#define	CAST_MOD_LONG_LONG 0x0040

struct cast_primitive_type {
	cast_primitive_kind kind;
	cast_primitive_modifier mod;
	cast_scoped_name name;
};
typedef struct cast_primitive_type cast_primitive_type;

struct cast_enum_field {
	char *name;
	cast_expr val;
};
typedef struct cast_enum_field cast_enum_field;

struct cast_enum_type {
	cast_scoped_name name;
	struct {
		u_int slots_len;
		cast_enum_field *slots_val;
	} slots;
};
typedef struct cast_enum_type cast_enum_type;

struct cast_array_type {
	cast_expr length;
	cast_type element_type;
};
typedef struct cast_array_type cast_array_type;

struct cast_pointer_type {
	cast_type target;
};
typedef struct cast_pointer_type cast_pointer_type;

struct cast_reference_type {
	cast_type target;
};
typedef struct cast_reference_type cast_reference_type;

typedef u_int cast_param_spec;
#define	CAST_PARAM_IMPLICIT 0x0001
#define	CAST_PARAM_UNUSED 0x0002

struct cast_param {
	cast_param_spec spec;
	char *name;
	cast_type type;
	cast_init default_value;
};
typedef struct cast_param cast_param;

typedef cast_param cast_func_param;

typedef u_int cast_func_spec;
#define	CAST_FUNC_VIRTUAL 0x0001
#define	CAST_FUNC_PURE 0x0002
#define	CAST_FUNC_INLINE 0x0004
#define	CAST_FUNC_EXPLICIT 0x0008
#define	CAST_FUNC_CONST 0x0010
#define	CAST_FUNC_OPERATOR 0x0020

struct cast_func_type {
	struct {
		u_int params_len;
		cast_func_param *params_val;
	} params;
	cast_type return_type;
	cast_func_spec spec;
	cast_type_array exception_types;
	cast_expr_array initializers;
};
typedef struct cast_func_type cast_func_type;

typedef u_int cast_parent_flags;
#define	CAST_PARENT_PUBLIC 0x0001
#define	CAST_PARENT_PROTECTED 0x0002
#define	CAST_PARENT_PRIVATE 0x0004
#define	CAST_PARENT_VIRTUAL 0x0008

struct cast_parent_spec {
	cast_parent_flags flags;
	cast_scoped_name name;
};
typedef struct cast_parent_spec cast_parent_spec;

enum cast_aggregate_kind {
	CAST_AGGREGATE_STRUCT = 1,
	CAST_AGGREGATE_UNION = 2,
	CAST_AGGREGATE_CLASS = 3
};
typedef enum cast_aggregate_kind cast_aggregate_kind;

struct cast_aggregate_type {
	cast_aggregate_kind kind;
	cast_scoped_name name;
	struct {
		u_int parents_len;
		cast_parent_spec *parents_val;
	} parents;
	cast_scope scope;
};
typedef struct cast_aggregate_type cast_aggregate_type;

typedef int cast_type_qualifier;
#define	CAST_TQ_CONST 0x01
#define	CAST_TQ_VOLATILE 0x02

struct cast_qualified_type {
	cast_type_qualifier qual;
	cast_type actual;
};
typedef struct cast_qualified_type cast_qualified_type;

enum cast_template_param_kind {
	CAST_TEMP_PARAM_TYPE = 1,
	CAST_TEMP_PARAM_CLASS = 2,
	CAST_TEMP_PARAM_TYPENAME = 3,
	CAST_TEMP_PARAM_TEMPLATE = 4
};
typedef enum cast_template_param_kind cast_template_param_kind;

struct cast_template_param_u {
	cast_template_param_kind kind;
	union {
		cast_type type_param;
		struct {
			u_int params_len;
			cast_template_param_t *params_val;
		} params;
	} cast_template_param_u_u;
};
typedef struct cast_template_param_u cast_template_param_u;

struct cast_template_param {
	char *name;
	cast_template_param_u u;
	cast_template_arg default_value;
};
typedef struct cast_template_param cast_template_param;

typedef u_int cast_template_flags;
#define	CAST_TEMP_EXPORT 0x0001

struct cast_template_type {
	cast_template_flags flags;
	struct {
		u_int params_len;
		cast_template_param *params_val;
	} params;
	cast_type def;
};
typedef struct cast_template_type cast_template_type;

enum cast_type_kind {
	CAST_TYPE_NAME = 1,
	CAST_TYPE_PRIMITIVE = 2,
	CAST_TYPE_ARRAY = 3,
	CAST_TYPE_POINTER = 4,
	CAST_TYPE_FUNCTION = 5,
	CAST_TYPE_ENUM = 6,
	CAST_TYPE_STRUCT_NAME = 7,
	CAST_TYPE_UNION_NAME = 8,
	CAST_TYPE_ENUM_NAME = 9,
	CAST_TYPE_VOID = 10,
	CAST_TYPE_QUALIFIED = 11,
	CAST_TYPE_AGGREGATE = 12,
	CAST_TYPE_NULL = 13,
	CAST_TYPE_REFERENCE = 14,
	CAST_TYPE_CLASS_NAME = 15,
	CAST_TYPE_TYPENAME = 16,
	CAST_TYPE_TEMPLATE = 17
};
typedef enum cast_type_kind cast_type_kind;

struct cast_type_u {
	cast_type_kind kind;
	union {
		cast_scoped_name name;
		cast_primitive_type primitive_type;
		cast_pointer_type pointer_type;
		cast_array_type array_type;
		cast_func_type func_type;
		cast_enum_type enum_type;
		cast_scoped_name struct_name;
		cast_scoped_name union_name;
		cast_scoped_name enum_name;
		cast_qualified_type qualified;
		cast_aggregate_type agg_type;
		cast_scoped_name class_name;
		cast_reference_type reference_type;
		cast_scoped_name typename_name;
		cast_template_type template_type;
	} cast_type_u_u;
};
typedef struct cast_type_u cast_type_u;

struct cast_lit_prim_u {
	cast_primitive_kind kind;
	union {
		char c;
		long i;
		float f;
		double d;
		char b;
	} cast_lit_prim_u_u;
};
typedef struct cast_lit_prim_u cast_lit_prim_u;

struct cast_lit_prim {
	cast_primitive_modifier mod;
	cast_lit_prim_u u;
};
typedef struct cast_lit_prim cast_lit_prim;

struct cast_expr_call {
	cast_expr func;
	cast_expr_array params;
};
typedef struct cast_expr_call cast_expr_call;

struct cast_expr_sel {
	cast_expr var;
	cast_scoped_name member;
};
typedef struct cast_expr_sel cast_expr_sel;

enum cast_unary_op {
	CAST_UNARY_DEREF = 1,
	CAST_UNARY_ADDR = 2,
	CAST_UNARY_NEG = 3,
	CAST_UNARY_LNOT = 4,
	CAST_UNARY_BNOT = 5,
	CAST_UNARY_PRE_INC = 6,
	CAST_UNARY_PRE_DEC = 7,
	CAST_UNARY_POST_INC = 8,
	CAST_UNARY_POST_DEC = 9
};
typedef enum cast_unary_op cast_unary_op;

struct cast_unary_expr {
	cast_unary_op op;
	cast_expr expr;
};
typedef struct cast_unary_expr cast_unary_expr;

struct cast_expr_cast {
	cast_expr expr;
	cast_type type;
};
typedef struct cast_expr_cast cast_expr_cast;

enum cast_binary_op {
	CAST_BINARY_MUL = 1,
	CAST_BINARY_DIV = 2,
	CAST_BINARY_MOD = 3,
	CAST_BINARY_ADD = 4,
	CAST_BINARY_SUB = 5,
	CAST_BINARY_SHL = 6,
	CAST_BINARY_SHR = 7,
	CAST_BINARY_LT = 8,
	CAST_BINARY_GT = 9,
	CAST_BINARY_LE = 10,
	CAST_BINARY_GE = 11,
	CAST_BINARY_EQ = 12,
	CAST_BINARY_NE = 13,
	CAST_BINARY_BAND = 14,
	CAST_BINARY_BXOR = 15,
	CAST_BINARY_BOR = 16,
	CAST_BINARY_LAND = 17,
	CAST_BINARY_LOR = 18,
	CAST_BINARY_ASSIGN = 19,
	CAST_BINARY_COMMA = 20
};
typedef enum cast_binary_op cast_binary_op;

struct cast_binary_expr {
	cast_binary_op op;
	cast_expr expr[2];
};
typedef struct cast_binary_expr cast_binary_expr;

struct cast_cond_expr {
	cast_expr test;
	cast_expr true_expr;
	cast_expr false_expr;
};
typedef struct cast_cond_expr cast_cond_expr;

struct cast_op_new_expr {
	cast_expr placement;
	cast_type type;
	cast_init init;
};
typedef struct cast_op_new_expr cast_op_new_expr;

struct cast_op_delete_expr {
	long array;
	cast_expr expr;
};
typedef struct cast_op_delete_expr cast_op_delete_expr;

enum cast_expr_kind {
	CAST_EXPR_NAME = 1,
	CAST_EXPR_LIT_PRIM = 2,
	CAST_EXPR_LIT_STRING = 3,
	CAST_EXPR_CALL = 4,
	CAST_EXPR_SEL = 5,
	CAST_EXPR_UNARY = 6,
	CAST_EXPR_CAST = 7,
	CAST_EXPR_SIZEOF_EXPR = 8,
	CAST_EXPR_SIZEOF_TYPE = 9,
	CAST_EXPR_BINARY = 10,
	CAST_EXPR_OP_ASSIGN = 11,
	CAST_EXPR_COND = 12,
	CAST_EXPR_CONST_NAME = 13,
	CAST_EXPR_CONST_CAST = 14,
	CAST_EXPR_DYNAMIC_CAST = 15,
	CAST_EXPR_REINTERPRET_CAST = 16,
	CAST_EXPR_STATIC_CAST = 17,
	CAST_EXPR_OP_NEW = 18,
	CAST_EXPR_OP_DELETE = 19,
	CAST_EXPR_TYPEID_EXPR = 20,
	CAST_EXPR_TYPEID_TYPE = 21,
	CAST_EXPR_TYPE = 22
};
typedef enum cast_expr_kind cast_expr_kind;

struct cast_expr_u {
	cast_expr_kind kind;
	union {
		cast_scoped_name name;
		cast_lit_prim lit_prim;
		char *lit_string;
		cast_expr_call call;
		cast_expr_sel sel;
		cast_unary_expr unary;
		cast_expr_cast cast;
		cast_expr sizeof_expr;
		cast_type sizeof_type;
		cast_binary_expr binary;
		cast_binary_expr op_assign;
		cast_cond_expr cond;
		cast_scoped_name const_name;
		cast_expr_cast c_cast;
		cast_expr_cast d_cast;
		cast_expr_cast r_cast;
		cast_expr_cast s_cast;
		cast_op_new_expr op_new;
		cast_op_delete_expr op_delete;
		cast_expr typeid_expr;
		cast_type typeid_type;
		cast_type type_expr;
	} cast_expr_u_u;
};
typedef struct cast_expr_u cast_expr_u;

typedef u_int cast_block_flags;
#define	CAST_BLOCK_REVERSE 0x00000001
#define	CAST_BLOCK_INLINE 0x00000002

struct cast_block {
	cast_scope scope;
	struct {
		u_int initials_len;
		cast_stmt *initials_val;
	} initials;
	struct {
		u_int stmts_len;
		cast_stmt *stmts_val;
	} stmts;
	cast_block_flags flags;
};
typedef struct cast_block cast_block;

struct cast_if {
	cast_expr test;
	cast_stmt true_stmt;
	cast_stmt false_stmt;
};
typedef struct cast_if cast_if;

struct cast_while {
	cast_expr test;
	cast_stmt stmt;
};
typedef struct cast_while cast_while;

struct cast_for {
	cast_expr init;
	cast_expr test;
	cast_expr iter;
	cast_stmt stmt;
};
typedef struct cast_for cast_for;

struct cast_switch {
	cast_expr test;
	cast_stmt stmt;
};
typedef struct cast_switch cast_switch;

struct cast_label {
	char *label;
	cast_stmt stmt;
	int users;
};
typedef struct cast_label cast_label;

struct cast_case {
	cast_expr label;
	cast_stmt stmt;
};
typedef struct cast_case cast_case;

struct cast_catch {
	cast_type type;
	char *name;
	cast_stmt block;
};
typedef struct cast_catch cast_catch;

struct cast_try {
	cast_stmt block;
	struct {
		u_int handlers_len;
		cast_catch *handlers_val;
	} handlers;
};
typedef struct cast_try cast_try;

typedef char *cast_handler_arg;

struct cast_handler {
	char *name;
	struct {
		u_int args_len;
		cast_handler_arg *args_val;
	} args;
};
typedef struct cast_handler cast_handler;

enum cast_stmt_kind {
	CAST_STMT_EXPR = 1,
	CAST_STMT_BLOCK = 2,
	CAST_STMT_IF = 3,
	CAST_STMT_WHILE = 4,
	CAST_STMT_DO_WHILE = 5,
	CAST_STMT_FOR = 6,
	CAST_STMT_SWITCH = 7,
	CAST_STMT_BREAK = 8,
	CAST_STMT_CONTINUE = 9,
	CAST_STMT_GOTO = 10,
	CAST_STMT_LABEL = 11,
	CAST_STMT_CASE = 12,
	CAST_STMT_DEFAULT = 13,
	CAST_STMT_RETURN = 14,
	CAST_STMT_TEXT = 15,
	CAST_STMT_NULL = 16,
	CAST_STMT_EMPTY = 17,
	CAST_STMT_TRY = 18,
	CAST_STMT_THROW = 19,
	CAST_STMT_DECL = 20,
	CAST_STMT_HANDLER = 21
};
typedef enum cast_stmt_kind cast_stmt_kind;

struct cast_stmt_u {
	cast_stmt_kind kind;
	union {
		cast_expr expr;
		cast_block block;
		cast_if s_if;
		cast_while s_while;
		cast_while s_do_while;
		cast_for s_for;
		cast_switch s_switch;
		char *goto_label;
		cast_label s_label;
		cast_case s_case;
		cast_stmt default_stmt;
		cast_expr return_expr;
		char *text;
		cast_try try_block;
		cast_expr throw_expr;
		cast_scope decl;
		cast_handler handler;
	} cast_stmt_u_u;
};
typedef struct cast_stmt_u cast_stmt_u;

struct cast_func_def {
	cast_func_type type;
	cast_block block;
};
typedef struct cast_func_def cast_func_def;

enum cast_init_kind {
	CAST_INIT_EXPR = 1,
	CAST_INIT_AGGREGATE = 2,
	CAST_INIT_CONSTRUCT = 3
};
typedef enum cast_init_kind cast_init_kind;

struct cast_init_u {
	cast_init_kind kind;
	union {
		cast_expr expr;
		cast_init_array subs;
		cast_expr_array exprs;
	} cast_init_u_u;
};
typedef struct cast_init_u cast_init_u;

struct cast_var_def {
	cast_type type;
	cast_init init;
};
typedef struct cast_var_def cast_var_def;

struct cast_include {
	char *filename;
	bool_t system_only;
};
typedef struct cast_include cast_include;

struct cast_direct {
	char *code_string;
};
typedef struct cast_direct cast_direct;

enum cast_storage_class {
	CAST_SC_NONE = 0,
	CAST_SC_AUTO = 1,
	CAST_SC_STATIC = 2,
	CAST_SC_EXTERN = 3,
	CAST_SC_REGISTER = 4,
	CAST_SC_MUTABLE = 5
};
typedef enum cast_storage_class cast_storage_class;

enum cast_using_kind {
	CAST_USING_NAME = 1,
	CAST_USING_TYPENAME = 2,
	CAST_USING_NAMESPACE = 3
};
typedef enum cast_using_kind cast_using_kind;

enum cast_def_kind {
	CAST_TYPEDEF = 0x00000001,
	CAST_TYPE = 0x00000002,
	CAST_FUNC_DECL = 0x00000004,
	CAST_FUNC_DEF = 0x00000008,
	CAST_VAR_DECL = 0x00000010,
	CAST_VAR_DEF = 0x00000020,
	CAST_DEFINE = 0x00000040,
	CAST_INCLUDE = 0x00000080,
	CAST_DIRECT_CODE = 0x00000100,
	CAST_NAMESPACE = 0x00000200,
	CAST_USING = 0x00000400,
	CAST_LINKAGE = 0x00000800,
	CAST_FRIEND = 0x00001000
};
typedef enum cast_def_kind cast_def_kind;

struct cast_def_u {
	cast_def_kind kind;
	union {
		cast_type typedef_type;
		cast_type type;
		cast_func_type func_type;
		cast_func_def func_def;
		cast_type var_type;
		cast_var_def var_def;
		cast_expr define_as;
		cast_include include;
		cast_direct direct;
		cast_scope *new_namespace;
		cast_using_kind using_scope;
		cast_scope *linkage;
		cast_type friend_decl;
	} cast_def_u_u;
};
typedef struct cast_def_u cast_def_u;

enum cast_def_protection {
	CAST_PROT_NONE = 0,
	CAST_PROT_PUBLIC = 1,
	CAST_PROT_PROTECTED = 2,
	CAST_PROT_PRIVATE = 3
};
typedef enum cast_def_protection cast_def_protection;

struct cast_def {
	cast_scoped_name name;
	cast_storage_class sc;
	cast_def_u u;
	data_channel_index channel;
	cast_def_protection protection;
};
typedef struct cast_def cast_def;

typedef cast_scope cast_1;
#endif /* _flick_cast_h */

/* the xdr functions */
extern bool_t xdr_cast_type();
extern bool_t xdr_cast_expr();
extern bool_t xdr_cast_stmt();
extern bool_t xdr_cast_init();
extern bool_t xdr_cast_template_arg();
extern bool_t xdr_cast_template_param_t();
extern bool_t xdr_cast_template_arg_array();
extern bool_t xdr_cast_scoped_name();
extern bool_t xdr_cast_scope();
extern bool_t xdr_cast_def_t();
extern bool_t xdr_cast_expr_array();
extern bool_t xdr_cast_type_array();
extern bool_t xdr_cast_init_array();
extern bool_t xdr_cast_template_arg_kind();
extern bool_t xdr_cast_template_arg_u();
extern bool_t xdr_cast_name_s();
extern bool_t xdr_cast_primitive_kind();
extern bool_t xdr_cast_primitive_modifier();
extern bool_t xdr_cast_primitive_type();
extern bool_t xdr_cast_enum_field();
extern bool_t xdr_cast_enum_type();
extern bool_t xdr_cast_array_type();
extern bool_t xdr_cast_pointer_type();
extern bool_t xdr_cast_reference_type();
extern bool_t xdr_cast_param_spec();
extern bool_t xdr_cast_param();
extern bool_t xdr_cast_func_param();
extern bool_t xdr_cast_func_spec();
extern bool_t xdr_cast_func_type();
extern bool_t xdr_cast_parent_flags();
extern bool_t xdr_cast_parent_spec();
extern bool_t xdr_cast_aggregate_kind();
extern bool_t xdr_cast_aggregate_type();
extern bool_t xdr_cast_type_qualifier();
extern bool_t xdr_cast_qualified_type();
extern bool_t xdr_cast_template_param_kind();
extern bool_t xdr_cast_template_param_u();
extern bool_t xdr_cast_template_param();
extern bool_t xdr_cast_template_flags();
extern bool_t xdr_cast_template_type();
extern bool_t xdr_cast_type_kind();
extern bool_t xdr_cast_type_u();
extern bool_t xdr_cast_lit_prim_u();
extern bool_t xdr_cast_lit_prim();
extern bool_t xdr_cast_expr_call();
extern bool_t xdr_cast_expr_sel();
extern bool_t xdr_cast_unary_op();
extern bool_t xdr_cast_unary_expr();
extern bool_t xdr_cast_expr_cast();
extern bool_t xdr_cast_binary_op();
extern bool_t xdr_cast_binary_expr();
extern bool_t xdr_cast_cond_expr();
extern bool_t xdr_cast_op_new_expr();
extern bool_t xdr_cast_op_delete_expr();
extern bool_t xdr_cast_expr_kind();
extern bool_t xdr_cast_expr_u();
extern bool_t xdr_cast_block_flags();
extern bool_t xdr_cast_block();
extern bool_t xdr_cast_if();
extern bool_t xdr_cast_while();
extern bool_t xdr_cast_for();
extern bool_t xdr_cast_switch();
extern bool_t xdr_cast_label();
extern bool_t xdr_cast_case();
extern bool_t xdr_cast_catch();
extern bool_t xdr_cast_try();
extern bool_t xdr_cast_handler_arg();
extern bool_t xdr_cast_handler();
extern bool_t xdr_cast_stmt_kind();
extern bool_t xdr_cast_stmt_u();
extern bool_t xdr_cast_func_def();
extern bool_t xdr_cast_init_kind();
extern bool_t xdr_cast_init_u();
extern bool_t xdr_cast_var_def();
extern bool_t xdr_cast_include();
extern bool_t xdr_cast_direct();
extern bool_t xdr_cast_storage_class();
extern bool_t xdr_cast_using_kind();
extern bool_t xdr_cast_def_kind();
extern bool_t xdr_cast_def_u();
extern bool_t xdr_cast_def_protection();
extern bool_t xdr_cast_def();
extern bool_t xdr_cast_1();

#endif /* !_CAST_H_RPCGEN */

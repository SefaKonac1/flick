/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _AOI_H_RPCGEN
#define	_AOI_H_RPCGEN

#include <rpc/rpc.h>
#ifndef _flick_aoi_h
#define _flick_aoi_h

#include <rpc/types.h>
#include <rpc/xdr.h>
#include <mom/meta.h>

typedef int aoi_ref;
#define	aoi_ref_null -1

typedef struct aoi_type_u *aoi_type;

typedef struct aoi_const_u *aoi_const;

typedef long aoi_const_int;

typedef char aoi_const_char;

typedef double aoi_const_float;

typedef struct {
	u_int aoi_const_struct_len;
	aoi_const *aoi_const_struct_val;
} aoi_const_struct;

typedef struct {
	u_int aoi_const_array_len;
	aoi_const *aoi_const_array_val;
} aoi_const_array;

enum aoi_const_kind {
	AOI_CONST_INT = 1,
	AOI_CONST_CHAR = 2,
	AOI_CONST_FLOAT = 3,
	AOI_CONST_STRUCT = 4,
	AOI_CONST_ARRAY = 5
};
typedef enum aoi_const_kind aoi_const_kind;

struct aoi_const_u {
	aoi_const_kind kind;
	union {
		aoi_const_int const_int;
		aoi_const_char const_char;
		aoi_const_float const_float;
		aoi_const_struct const_struct;
		aoi_const_array const_array;
	} aoi_const_u_u;
};
typedef struct aoi_const_u aoi_const_u;

struct aoi_field {
	char *name;
	aoi_type type;
};
typedef struct aoi_field aoi_field;

struct aoi_const_def {
	aoi_type type;
	aoi_const value;
};
typedef struct aoi_const_def aoi_const_def;

struct aoi_integer {
	int min;
	u_int range;
};
typedef struct aoi_integer aoi_integer;

typedef u_int aoi_scalar_flags;
#define	AOI_SCALAR_FLAG_NONE 0
#define	AOI_SCALAR_FLAG_SIGNED 1
#define	AOI_SCALAR_FLAG_UNSIGNED 2

struct aoi_scalar {
	int bits;
	aoi_scalar_flags flags;
};
typedef struct aoi_scalar aoi_scalar;

struct aoi_float {
	int bits;
};
typedef struct aoi_float aoi_float;

typedef u_int aoi_char_flags;
#define	AOI_CHAR_FLAG_NONE 0
#define	AOI_CHAR_FLAG_SIGNED 1
#define	AOI_CHAR_FLAG_UNSIGNED 2

struct aoi_char {
	int bits;
	aoi_char_flags flags;
};
typedef struct aoi_char aoi_char;

typedef u_int aoi_array_flags;
#define	AOI_ARRAY_FLAG_NONE 0x00000000
#define	AOI_ARRAY_FLAG_NULL_TERMINATED_STRING 0x00000001
#define	AOI_ARRAY_FLAG_OPAQUE 0x00000002
#define	AOI_ARRAY_FLAG_ALL 0x00000003

struct aoi_array {
	aoi_type element_type;
	aoi_type length_type;
	aoi_array_flags flgs;
};
typedef struct aoi_array aoi_array;

typedef aoi_field aoi_struct_slot;

struct aoi_struct {
	struct {
		u_int slots_len;
		aoi_struct_slot *slots_val;
	} slots;
};
typedef struct aoi_struct aoi_struct;

struct aoi_union_case {
	aoi_const val;
	aoi_field var;
};
typedef struct aoi_union_case aoi_union_case;

struct aoi_union {
	aoi_field discriminator;
	char *union_label;
	struct {
		u_int cases_len;
		aoi_union_case *cases_val;
	} cases;
	aoi_field *dfault;
};
typedef struct aoi_union aoi_union;

enum aoi_direction {
	AOI_DIR_IN = 1,
	AOI_DIR_OUT = 2,
	AOI_DIR_INOUT = 3,
	AOI_DIR_RET = 4
};
typedef enum aoi_direction aoi_direction;

struct aoi_parameter {
	char *name;
	aoi_direction direction;
	aoi_type type;
};
typedef struct aoi_parameter aoi_parameter;

typedef u_int aoi_op_flags;
#define	AOI_OP_FLAG_NONE 0x00000000
#define	AOI_OP_FLAG_ONEWAY 0x00000001
#define	AOI_OP_FLAG_IDEMPOTENT 0x00000002
#define	AOI_OP_FLAG_SETTER 0x00000004
#define	AOI_OP_FLAG_GETTER 0x00000008

struct aoi_operation {
	char *name;
	aoi_const request_code;
	aoi_const reply_code;
	aoi_op_flags flags;
	struct {
		u_int params_len;
		aoi_parameter *params_val;
	} params;
	aoi_type return_type;
	struct {
		u_int exceps_len;
		aoi_type *exceps_val;
	} exceps;
};
typedef struct aoi_operation aoi_operation;

struct aoi_attribute {
	char *name;
	aoi_const read_request_code;
	aoi_const read_reply_code;
	aoi_const write_request_code;
	aoi_const write_reply_code;
	aoi_type type;
	bool_t readonly;
};
typedef struct aoi_attribute aoi_attribute;

typedef aoi_field aoi_exception_slot;

struct aoi_exception {
	struct {
		u_int slots_len;
		aoi_exception_slot *slots_val;
	} slots;
};
typedef struct aoi_exception aoi_exception;

enum aoi_idl_id {
	AOI_IDL_CORBA = 1,
	AOI_IDL_MIG = 2,
	AOI_IDL_SUN = 3,
	AOI_IDL_DCE = 4
};
typedef enum aoi_idl_id aoi_idl_id;

struct aoi_interface {
	aoi_idl_id idl;
	aoi_type code_type;
	aoi_const code;
	struct {
		u_int parents_len;
		aoi_type *parents_val;
	} parents;
	aoi_type op_code_type;
	struct {
		u_int ops_len;
		aoi_operation *ops_val;
	} ops;
	struct {
		u_int attribs_len;
		aoi_attribute *attribs_val;
	} attribs;
	struct {
		u_int excepts_len;
		aoi_type *excepts_val;
	} excepts;
};
typedef struct aoi_interface aoi_interface;

struct aoi_enum {
	char *enum_label;
	struct {
		u_int defs_len;
		struct aoi_field *defs_val;
	} defs;
};
typedef struct aoi_enum aoi_enum;

struct aoi_optional {
	aoi_type type;
};
typedef struct aoi_optional aoi_optional;

struct aoi_typed {
	aoi_type tag;
	aoi_type type;
};
typedef struct aoi_typed aoi_typed;

enum aoi_kind {
	AOI_INDIRECT = 1,
	AOI_INTEGER = 2,
	AOI_SCALAR = 3,
	AOI_FLOAT = 4,
	AOI_CHAR = 5,
	AOI_ARRAY = 6,
	AOI_STRUCT = 7,
	AOI_UNION = 8,
	AOI_INTERFACE = 9,
	AOI_EXCEPTION = 10,
	AOI_ENUM = 11,
	AOI_VOID = 12,
	AOI_CONST = 13,
	AOI_NAMESPACE = 14,
	AOI_OPTIONAL = 15,
	AOI_FWD_INTRFC = 16,
	AOI_ANY = 17,
	AOI_TYPE_TAG = 18,
	AOI_TYPED = 19,
	AOI_ERROR = 20
};
typedef enum aoi_kind aoi_kind;

struct aoi_type_u {
	aoi_kind kind;
	union {
		aoi_ref indirect_ref;
		aoi_integer integer_def;
		aoi_scalar scalar_def;
		aoi_float float_def;
		aoi_char char_def;
		aoi_array array_def;
		aoi_struct struct_def;
		aoi_union union_def;
		aoi_interface interface_def;
		aoi_exception exception_def;
		aoi_enum enum_def;
		aoi_const_def const_def;
		aoi_optional optional_def;
		aoi_ref fwd_intrfc_def;
		aoi_typed typed_def;
	} aoi_type_u_u;
};
typedef struct aoi_type_u aoi_type_u;

struct aoi_def {
	char *name;
	int scope;
	io_file_index idl_file;
	aoi_type binding;
};
typedef struct aoi_def aoi_def;

struct aoi {
	struct {
		u_int defs_len;
		aoi_def *defs_val;
	} defs;
	meta meta_data;
};
typedef struct aoi aoi;
#endif /* _flick_aoi_h */

/* the xdr functions */
extern bool_t xdr_aoi_ref();
extern bool_t xdr_aoi_type();
extern bool_t xdr_aoi_const();
extern bool_t xdr_aoi_const_int();
extern bool_t xdr_aoi_const_char();
extern bool_t xdr_aoi_const_float();
extern bool_t xdr_aoi_const_struct();
extern bool_t xdr_aoi_const_array();
extern bool_t xdr_aoi_const_kind();
extern bool_t xdr_aoi_const_u();
extern bool_t xdr_aoi_field();
extern bool_t xdr_aoi_const_def();
extern bool_t xdr_aoi_integer();
extern bool_t xdr_aoi_scalar_flags();
extern bool_t xdr_aoi_scalar();
extern bool_t xdr_aoi_float();
extern bool_t xdr_aoi_char_flags();
extern bool_t xdr_aoi_char();
extern bool_t xdr_aoi_array_flags();
extern bool_t xdr_aoi_array();
extern bool_t xdr_aoi_struct_slot();
extern bool_t xdr_aoi_struct();
extern bool_t xdr_aoi_union_case();
extern bool_t xdr_aoi_union();
extern bool_t xdr_aoi_direction();
extern bool_t xdr_aoi_parameter();
extern bool_t xdr_aoi_op_flags();
extern bool_t xdr_aoi_operation();
extern bool_t xdr_aoi_attribute();
extern bool_t xdr_aoi_exception_slot();
extern bool_t xdr_aoi_exception();
extern bool_t xdr_aoi_idl_id();
extern bool_t xdr_aoi_interface();
extern bool_t xdr_aoi_enum();
extern bool_t xdr_aoi_optional();
extern bool_t xdr_aoi_typed();
extern bool_t xdr_aoi_kind();
extern bool_t xdr_aoi_type_u();
extern bool_t xdr_aoi_def();
extern bool_t xdr_aoi();

#endif /* !_AOI_H_RPCGEN */
